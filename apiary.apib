FORMAT: 1A
HOST: https://wl.golden.env.yola.net

# Yola API

Partner API for Yola Sitebuilder.

All resources can be accessed via RESTful endpoints.

All endpoints expect and return JSON objects.

# Pagination

All listing endpoints return paginated results unless otherwise stated.

For example:

```
{
    "count": 6898,
    "next": "https://wl.qa.yola.net/pr/users/?page=2",
    "previous": null,
    "results": [{...}, {...}, ...]
}
```

You may pass `page` and `page_size` parameters to adjust the result set.

# Auth

All endpoints require valid HTTP authentication credentials unless otherwise stated.

When using the API console, enter your username and password as HTTP headers.

## Group Partners

Create, get, update and delete partners.

### Partner List Actions [/partners/]
 
#### List partners [GET]

#### Create a partner [POST]

+ Attributes
    + id: WL_TEST123 (string, required) - partner ID
    + name: Test Partner (string, required) - partner name
    + parent_partner_id: WL_TEST_PARENT (string) - optional string containing ID of the parent partner.  Is null for the top-level partners.  Default is null.
    + properties (object) - json object that contains mapping of property names to property values.
        + billing_email: (string) - partner billing email address.
        + billing_name: (string) - partner billing name.
        + billing_phone: (string) - partner billing phone.
        + company_address: (string) - address of the partner company.
        + company_logo: (string) - URL of partners company logo image.
        + company_logo_width: (number) - width of the company logo.
        + currency: (string) - ISO 4271 currency code.
        + country: (string) - name of the partner's country.
        + footer_url: (string) - URL of custom footer HTML or image.
        + google_maps_starting_address: (string) - the default search text to show in google map widget.
        + publishing_endpoint: (string) - URL to publish partner's sites.
        + publishing_type: (string) - determines the way how partner's sites are published.  The possible values are FTP (sites are published to the partner's FTP server) and YOLA (sites are published on Yola servers by yola means)
        + support_email: (string) - email of partner's customer support service.
        + support_name: (string) - name of the person or department responsible of partner's customer support service.
        + support_phone: (string) - phone number of partner's customer support.
        + support_url: (string) - URL the partners customer support site.
        + technical_email: (string) - email of partner's technical support service.
        + technical_name: (string) - name of the person or department responsible of partner's technical support service.
        + technical_phone: (string) - phone number of partner's technical support.
        + website: (string) - URL of partner's website
        + ftp_concurrency: (number) - max number of concurrent connections to partner's FTP publishing endpoint.
        + widget_exclusion_list: (array) - list of site widget names that should not be shown to partner's users.
        + available_non_paid_features: (array) - list of features enabled for users. Possible values are account_status, analytics, dashboard, payment_methods, profile
        + available_subscription_types: (array) - list of subscription types available for provisioning/switching to.  Replacement for old `packages` (which is deprecated).  Possible values are wl_ultra_lite, wl_lite, wl_basic, wl_premium, wl_premium_ecomm, wl_advertising_starter, wl_advertising_growth, wl_advertising_pro, wl_ecommerce_demo, wl_ecommerce_basic, wl_ecommerce_professional, wl_ecommerce_unlimited

### Single Partner Actions [/partners/{partner_id}/]

#### Get partner details [GET]

#### Full update of partner details [PUT]

The json object fields are the same as for partner creation.
Requires that all non-optional fields are set.

#### Partial update partner details [PATCH]

The json object fields are the same as for partner creation.
You only have to specify the fields you want to update.

#### Delete a partner [DELETE]

#### Child partner IDs [GET /partners/{partner_id}/child_partner_ids/]

Lists IDs of child partners recursively

#### Ancestor partner IDs [GET /partners/{partner_id}/ancestors/]


## Group Users

Create, get, update, and delete users.

### User List Actions [/users/]

#### List all users [GET]

Results are filterable on the following fields:

* `id`
* `email`
* `partner_id`

For example: `GET /users/?page_size=100&partner_id=WL_YOLA`

#### Create user [POST]

+ Attributes
    + name: (string) - first name of the user.
    + surname: (string) - last name of the user.
    + email: (string) - user's email.
    + partner_id: (string) - ID of the partner this user belongs to.
    + preferences: (object) - name of the object items are the names of user prefernces and the values of the items are values of the preferences.

### Single User Actions [/users/{user_id}/]

#### Get details for a particular user [GET]

#### Full update of user details [PUT]

The json object fields are the same as for user creation. PUT requires that all non-optional fields are set.

#### Partial update of user details [PATCH]

The json object fields are the same as for user creation. PATCH allows to specify only fields that are about to be modified.

#### Delete a user [DELETE]

#### SSO Create Site URL [GET /users/{user_id}/sso_url_create_site/?domain={domain}]

#### SSO Open Site URL [GET /users/{user_id}/sso_url_open_site/]

WL user can only have one site, so this endpoint doesn't require site id.

#### Change partner [POST /users/{user_id}/change_partner/]

+ Attributes
    + new_partner_id: (string) - ID of the new partner


## Group Subscriptions

Actions on subscriptions.

### Subscription List Actions [/subscriptions/]

#### List subscriptions [GET]

Results are scoped to given partner and all its sub-partners.

Supports filtering by user:

```
GET /subscriptions/?user_id=USER_ID
```

And/Or by status:

```
GET /subscriptions/?status__in=active,canceled,expired (subs considered active)
```

Supported filters:

```
user_id, status, status__in, partner_id
```

Result can be ordered by any field:

```
GET /subscriptions/?ordering=expiry_date,type
```

For reverse ordering please prefix the field name with '-':

```
GET /subscriptions/?ordering=-billing_date
```

#### Create new subscription [POST]

+ Attributes
    + type: (string) - the subscription type
    + properties: (object) - subscription properties
        + trial: (boolean) - is this a trial subscription?
        + campaign_id: (string) - SiteWit campaign ID (if this is an advertising product)
        + site_id: (string) - Yola site id (if this is an advertising product)
        + currency: (string) - campaign's currency (if this is an advertisting product)

See the "change type" action for available subscription types.

### Single subscription actions [/subscriptions/{subscription_id}/]

#### Get subscription's details [GET]

#### Change subscription type [POST /subscriptions/{subscription_id}/change_type/]

+ Attributes
    + new_type: (string) - The new subscription type

Available types are:

packages:

```
wl_ultra_lite, wl_lite, wl_basic, wl_premium, wl_premium_ecomm.
```

Advertising subscriptions:

```
wl_advertising_starter, wl_advertising_growth, wl_advertising_pro.
```

Ecwid add-ons (they cannot be provisioned without package, except for wl_ecommerce_demo):

```
wl_ecommerce_demo, wl_ecommerce_basic, wl_ecommerce_professional, wl_ecommerce_unlimited.
```

#### Cancel active subscription [POST /subscriptions/{SUBSCRIPTION_ID}/cancel/]

+ Attributes
    + reason: (string) - The reason for cancellation

#### Reactivate cancelled subscription [POST /subscriptions/{SUBSCRIPTION_ID}/reactivate/]

+ Attributes
    + reason: (string) - The reason for reactivation

#### Convert TRIAL subscription to active [POST /subscriptions/{SUBSCRIPTION_ID}/remove_trial/]

#### Deprovision subscription [POST /subscriptions/{SUBSCRIPTION_ID}/deprovision/]

+ Attributes
    + reason: (string) - Reason for deprovision
    + soft: (boolean) - If true, only mark subscription as deprovisioned


## Group Campaigns

SiteWit campaigns actions for a particular site.

**Campaign Resource**:

```
{
    "id": <campaign_id>, int,
    "name": <campaign_name>, str,
    "status": <campaign_status>, str ("Active", "Cancelled"...),
    "subscription_id": <subscription_id>, str.
                       Related subscription if exists, otherwise None.
}
```

### List campaigns [GET /sites/{SITE_ID}/campaigns/]

### Get details for one of your campaigns [GET /sites/{SITE_ID}/campaigns/{CAMPAIGN_ID}/]

### Delete campaign [DELETE /sites/{SITE_ID}/campaigns/{CAMPAIGN_ID}/]

Returns deleted Campaign Resource or 404 if campaign not found. If campaign has active subscription, it will be deprovisioned.

### Subscribe to campaign [POST /sites/{SITE_ID}/campaigns/{CAMPAIGN_ID}/subscribe/]

+ Attributes
    + budget: (number) - campaign budget
    + currency: (string) - campaign currency

### Cancel campaign subscription [POST /sites/{SITE_ID}/campaigns/{CAMPAIGN_ID}/cancel_subscription/]

## Group Sites

### List sites [GET /sites/]

### Get details of a particular site [GET /sites/{SITE_ID}/]

### Delete a site [DELETE /sites/{SITE_ID}]
